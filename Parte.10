# Juego.canvas.parte.10
Parte 10
Vamos a darle algunas vidas al jugador, añade la siguiente variable:

  var lives = 3;
  
Para mostrar las vidas en pantalla, agrega el siguiente fragmento debajo de drawScore():

  function drawLives() {
  ctx.font = "18px Ink free";
  ctx.fillStyle = "#000000";
  ctx.fillText("Lives: "+lives, canvas.width-70, 25);
   }
 
Reemplaza estas dos líneas:

  alert("¡PERDISTE!");
  document.location.reload();
 
Por este fragmento:

   lives--;
    if(!lives) {
    alert("¡PERDISTE!");
    document.location.reload();
    }
    else {
    x = canvas.width/3;
    y = canvas.height-20;
    dx = 3;
    dy = -3;
    paddleX = (canvas.width-paddleWidth)/3;
    }
   
Para sacar el contador de vidas en pantalla, agrega el siguiente llamado debajo de drawScore():

  drawLives();
  
Reemplaza la línea

  setInterval(draw, 10);

Por esta:
  
  draw();
  
Agrega a la función draw() la siguiente línea para que esa función sea recursiva:

  requestAnimationFrame(draw);
  
Este es el código final, compara el tuyo:

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Gamedev Canvas Workshop</title>
    <style>
        * { padding: 0; margin: 0; }
        canvas { background: #eee; display: block; margin: 0 auto; }
    </style>
</head>
<body>
<canvas id="myCanvas" width="400" height="300"></canvas>
<script>
    var canvas = document.getElementById("myCanvas");
    var ctx = canvas.getContext("2d");
    var ballRadius = 15;
    var x = canvas.width/3;
    var y = canvas.height-40;
    var dx = 3;
    var dy = -3;
    var paddleHeight = 7;
    var paddleWidth = 80;
    var paddleX = (canvas.width-paddleWidth)/3;
    var rightPressed = false;
    var leftPressed = false;
    var brickRowCount = 4;
    var brickColumnCount = 12;
    var brickWidth = 20;
    var brickHeight = 20;
    var brickPadding = 10;
    var brickOffsetTop = 20;
    var brickOffsetLeft = 20;
    var score = 0;
    var lives = 3;
    var bricks = [];
    for(c=0; c<brickColumnCount; c++) {
    bricks[c] = [];
    for(r=0; r<brickRowCount; r++) {
        bricks[c][r] = { x: 0, y: 0, status: 1 };
    }
    }
    document.addEventListener("keydown", keyDownHandler, false);
    document.addEventListener("keyup", keyUpHandler, false);
    document.addEventListener("mousemove", mouseMoveHandler, false);
    function mouseMoveHandler(e) {
    var relativeX = e.clientX - canvas.offsetLeft;
    if(relativeX > 0 && relativeX < canvas.width) {
        paddleX = relativeX - paddleWidth/3;
    }
    }
    function keyDownHandler(e) {
    if(e.keyCode == 39) {
        rightPressed = true;
    }
    else if(e.keyCode == 37) {
        leftPressed = true;
    }
    }
    function keyUpHandler(e) {
    if(e.keyCode == 39) {
        rightPressed = false;
    }
    else if(e.keyCode == 37) {
        leftPressed = false;
    }
    }
    function drawBall(){
        ctx.beginPath();
        ctx.arc(x, y, ballRadius, 0, Math.PI*2);
        ctx.fillStyle = "#800080";
        ctx.fill();
        ctx.closePath();
    }
    function drawPaddle() {
    ctx.beginPath();
    ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);
    ctx.fillStyle = "#C71585";
    ctx.fill();
    ctx.closePath();
    }
   function drawBricks() {
    for(c=0; c<brickColumnCount; c++) {
        for(r=0; r<brickRowCount; r++) {
            if(bricks[c][r].status == 1) {
                var brickX = (c*(brickWidth+brickPadding))+brickOffsetLeft;
                var brickY = (r*(brickHeight+brickPadding))+brickOffsetTop;
                bricks[c][r].x = brickX;
                bricks[c][r].y = brickY;
                ctx.beginPath();
                ctx.rect(brickX, brickY, brickWidth, brickHeight);
                ctx.fillStyle = "#FF1493";
                ctx.fill();
                ctx.closePath();
            }
        }
    }
    }
   function collisionDetection() {
    for(c=0; c<brickColumnCount; c++) {
        for(r=0; r<brickRowCount; r++) {
            var b = bricks[c][r];
            if(b.status == 1) {
                if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
                    dy = -dy;
                    b.status = 0;
                    score ++;
                    if(score == brickRowCount*brickColumnCount) {
                        alert("¡LO LOGRASTE!");
                        document.location.reload();
                    }
                }
            }
        }
    }
    }
    function drawScore() {
    ctx.font = "18px Ink free";
    ctx.fillStyle = "#000000";
    ctx.fillText("Score: "+score, 10, 22);
    }
    function drawLives() {
    ctx.font = "18px Ink free";
    ctx.fillStyle = "#000000";
    ctx.fillText("Lives: "+lives, canvas.width-70, 25);
    }
    function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBricks();
    drawBall();
    drawPaddle();
    drawScore();
    drawLives();
    collisionDetection();
    if(x + dx > canvas.width-ballRadius || x + dx < ballRadius) {
    dx = -dx;
    }
    if(y + dy < ballRadius) {
    dy = -dy;
    } else if(y + dy > canvas.height-ballRadius) {
    if(x > paddleX && x < paddleX + paddleWidth) {
        dy = -dy;
    }
    else {
        lives--;
    if(!lives) {
    alert("¡PERDISTE!");
    document.location.reload();
    }
    else {
    x = canvas.width/3;
    y = canvas.height-20;
    dx = 3;
    dy = -3;
    paddleX = (canvas.width-paddleWidth)/3;
    }
    }
    }
     if(rightPressed && paddleX < canvas.width-paddleWidth) {
    paddleX += 5;
    }
    else if(leftPressed && paddleX > 0) {
    paddleX -= 5;
    }
     x += dx;
     y += dy;
     requestAnimationFrame(draw);
    }
    draw();
</script>
</body>
</html>
